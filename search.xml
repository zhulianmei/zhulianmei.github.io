<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python 小功能]]></title>
    <url>%2Fpython%2Flinux%2Fpython-little-function.html</url>
    <content type="text"><![CDATA[list排序,按照元素内的数字大小12345678910111213def tryint(s): try: return int(s) except ValueError: return sdef str2int(v_str): return [tryint(sub_str) for sub_str in re.split('([0-9]+)', v_str)] originFileList = ['1_aa.sql', '3_1.sql', '11_2.sql']print sorted(originFileList)# output ['11_2.sql', '1_aa.sql', '3_1.sql']print sorted(originFileList, key=str2int)# output ['1_aa.sql', '3_1.sql', '11_2.sql'] python ftp 直接读取远端文件并赋值变量12345678910111213from ftplib import FTPfrom io import BytesIOdef ftpGetFileData(): filename='/ftp/filename/path/filename' ftp = FTP() ftp.connect(ftpServer, ftpPort) ftp.login(ftpUsername, ftpPassword) bufsize = 1024 r = BytesIO() ftp.retrbinary('RETR ' + filename, r.write, bufsize) sql = r.getvalue() print sql]]></content>
      <categories>
        <category>python</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql 小知识]]></title>
    <url>%2Fmysql%2Fmysql-knowlege.html</url>
    <content type="text"><![CDATA[元数据锁博客地址：https://blog.csdn.net/wanbf123/article/details/80697787 121 server实现的锁，2 保证DDL操作与DML操作之间的一致性而实现的 前缀索引mysql 8.0.13之后非前缀索引也可以用了 配置文件配置文件读取顺序如下：并且直到读取到最后一个my.cnf 初始化和启动mysql的时候一定要指定my.cnf的位置12345[root@node3 ~]# mysql --help |grep -B 1 my.cnf|grep -v &apos;\-P&apos; order of preference, my.cnf, $MYSQL_TCP_PORT,--Default options are read from the following files in the given order:/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf 常用命令集查询锁等待(元数据锁无法查询到)1select r.trx_id wait_trx_id,r.trx_mysql_thread_id wait_thr_id,r.trx_query wait_query,b.trx_id block_trx_id,b.trx_mysql_thread_id block_thrd_id,b.trx_query block_query from information_schema.innodb_lock_waits w inner join information_schema.innodb_trx b on b.trx_id = w.blocking_trx_id inner join information_schema.innodb_trx r on r.trx_id =w.requesting_trx_id; 主从复制进程12345STOP SLAVE IO_THREAD;STOP SLAVE SQL_THREAD;START SLAVE IO_THREAD;START SLAVE SQL_THREAD; 查询数据量大小1select concat(round(sum(DATA_LENGTH/1024/1024/1024)+sum(INDEX_LENGTH/1024/1024/1024),2),&apos;G&apos;) from information_schema.tables; 字符集123456[mysqld]character-set-server=utf8[mysql]default-character-set=utf8[client]default-character-set=utf8]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[两台机器搭建CDH]]></title>
    <url>%2F%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2Fhadoop%2Fcdh-install.html</url>
    <content type="text"><![CDATA[说明： 1，本blog只包含了CDH的搭建，未包含网页配置各个组件 2, 两台和多台机器搭建只在于dfs.replications参数的修改和setrep命令的执行，其他基本一致 下载安装包cm（cloudera manager）下载地址:http://archive.cloudera.com/cm5/cm/5/12下载的文件:cloudera-manager-centos7-cm5.10.2_x86_64.tar.gz hadoop各个组件安装包下载地址:http://archive.cloudera.com/cdh5/parcels/5.10.2/1234下载的文件:CDH-5.7.1-1.cdh5.7.1.p0.11-el7.parcel.sha1CDH-5.7.1-1.cdh5.7.1.p0.11-el7.parcelmanifest.json jdbc连接mysql的jar包(页面选择Plantform Independent):https://dev.mysql.com/downloads/connector/j/12下载的文件:mysql-connector-java-5.1.46-bin.jar 机器配置无密码登录1234567三台机器主机名分别为 :node1 node2 [root@node1 ~]# ssh-keygen -t rsa一路回车默认值[root@node1 ~]# ssh-copy-id node1[root@node1 ~]# ssh-copy-id node2 另一台机器均执行以上命令 安装java详见 https://zhulianmei.github.io/linux/linux-install-java8.html 安装mysql详见: https://zhulianmei.github.io/database/mysql/binary-mysql-install.html 注意! binlog模式必须为row 处理cm安装包和mysql-connector12345[root@node1 opt]# tar -xf /root/cloudera-manager-el6-cm5.7.1_x86_64.tar.gz -C /opt/[root@node1 opt]# ls /opt/cloudera cm-5.7.1[root@node1 ]# tar -xf mysql-connector-java-5.1.46-bin.jar[root@node1 opt]# cp mysql-connector-java-5.1.46-bin.jar/mysql-connector-java-5.1.46-bin.jar /opt/cm-5.7.1/share/cmf/lib/ 初始化scm库123456789101112131415本机 mysql&gt; grant all on *.* to &apos;temp&apos;@&apos;%&apos; identified by &apos;temp&apos; with grant option;初始化命令:格式:scm_prepare_database.sh 数据库类型 数据库 服务器IP 用户名 密码 –scm-host Cloudera_Manager_Server机器IP scm scm scm如：[root@node1 opt]# /opt/cm-5.7.1/share/cmf/schema/scm_prepare_database.sh mysql cm -hlocalhost -utemp -ptemp scm scm scm输出如下：JAVA_HOME=/usr/share/jdk1.8.0_162Verifying that we can write to /opt/cm-5.7.1/etc/cloudera-scm-serverCreating SCM configuration file in /opt/cm-5.7.1/etc/cloudera-scm-servergroups: cloudera-scm：无此用户Executing: /usr/share/jdk1.8.0_162/bin/java -cp /usr/share/java/mysql-connector-java.jar:/usr/share/java/oracle-connector-java.jar:/opt/cm-5.7.1/share/cmf/schema/../lib/* com.cloudera.enterprise.dbutil.DbCommandExecutor /opt/cm-5.7.1/etc/cloudera-scm-server/db.properties com.cloudera.cmf.db.2018-06-08 15:08:17,901 [main] INFO com.cloudera.enterprise.dbutil.DbCommandExecutor - Successfully connected to database.All done, your SCM database is configured correctly!以上步骤会创建一个scm库和scm用户密码为scm 用于存放和访问CM的数据 所有agent节点添加scm用户1useradd --system --home=/opt/cm-5.7.1/run/cloudera-scm-server/ --no-create-home --shell=/bin/false --comment &quot;Cloudera SCM User&quot; cloudera-scm 配置agent修改agent的配置文件的serverhost并分发文件到其他agent机器 （注意不要直接scp，文件中软连接源文件976M，拷贝完的文件变成了1.7G）**12345678[root@node1 ~]# vim /opt/cm-5.7.1/etc/cloudera-scm-agent/config.iniserver_host=node1[root@node1 opt]# tar -czf cm-5.7.1.tar.gz cm-5.7.1[root@node1 opt]# scp cm-5.7.1.tar.gz node2:/opt/在node2解压cm-5.7.1.tar.gz 拷贝镜像文件到/opt镜像仓库123456789[root@node1 cloudera]# cp /root/CDH-5.7.1-1.cdh5.7.1.p0.11-el6.parcel* /opt/cloudera/parcel-repo/[root@node1 cloudera]# cp /root/CDH-5.7.1-1.cdh5.7.1.p0.11-el6.parcel* /opt/cloudera/parcel-repo/[root@node1 cloudera]# cp /root/manifest.json /opt/cloudera/parcel-repo/重命名文件，否则会重新下载镜像文件root@node1 ~]# cd /opt/cloudera/parcel-repo/[root@node1 parcel-repo]# lsCDH-5.7.1-1.cdh5.7.1.p0.11-el6.parcel CDH-5.7.1-1.cdh5.7.1.p0.11-el6.parcel.sha1 manifest.json[root@node1 parcel-repo]# mv CDH-5.7.1-1.cdh5.7.1.p0.11-el6.parcel.sha1 CDH-5.7.1-1.cdh5.7.1.p0.11-el6.parcel.sha 启动server和agent进程12345[root@node1 parcel-repo]# /opt/cm-5.7.1/etc/init.d/cloudera-scm-server startStarting cloudera-scm-server: [确定][root@node1 parcel-repo]# /opt/cm-5.7.1/etc/init.d/cloudera-scm-agent start正在启动 cloudera-scm-agent： [确定][root@node1 parcel-repo]# 查看是否启动成功server(初次启动需要初始化，要等4-5分钟)12345678查看server日志[root@node1 ~]# tail -f /opt/cm-5.7.1/log/cloudera-scm-server/cloudera-scm-server.log 2018-06-08 16:14:26,441 INFO WebServerImpl:org.mortbay.log: jetty-6.1.26.cloudera.42018-06-08 16:14:26,450 INFO WebServerImpl:org.mortbay.log: Started SelectChannelConnector@0.0.0.0:71802018-06-08 16:14:26,451 INFO WebServerImpl:com.cloudera.server.cmf.WebServerImpl: Started Jetty server.查看端口[root@node1 lib]# ss -lntup|grep 7180tcp LISTEN 0 50 *:7180 *:* users:((&quot;java&quot;,24866,265)) 成功启动如下图 两台机器需要注意两点在控制台的各个组件 配置标签的搜索框内分别搜索以下两个参数 1,dfs.replication按照以上配置之后会出现HDFS 副本块不足的报错 步骤一： 先将dfs.replication 的参数修改为2， 修改之后即使重启还是会有”副本块不足的”报错。因为这个参数其实只在文件被写入dfs时起作用原有写入hdfs的备份数目还是不会改变。 步骤二： 主机上执行命令：hadoop fs fs -setrep -R 2 / 如果报权限不够，需要先执行 export HADOOP_USER_NAME=hdfs，再执行上面的命令，感谢https://community.cloudera.com/t5/CDH-Manual-Installation/Permission-denied-user-root-access-WRITE-inode-quot-user/td-p/4943提出（可能需要翻，在最后一个评论。翻了好久才找到- -。。） 上面的命令输出为：其中Replication 与DataNode个数相对应12345678910111213141516171819Replication 2 set: /hbase/MasterProcWALs/state-00000000000000000003.logReplication 2 set: /hbase/data/hbase/meta/.tabledesc/.tableinfo.0000000001Replication 2 set: /hbase/data/hbase/meta/1588230740/.regioninfoReplication 2 set: /hbase/data/hbase/meta/1588230740/info/8e2bccc11b8e44f8808d6fd1a30b770fReplication 2 set: /hbase/data/hbase/meta/1588230740/recovered.edits/11.seqidReplication 2 set: /hbase/data/hbase/namespace/.tabledesc/.tableinfo.0000000001Replication 2 set: /hbase/data/hbase/namespace/2c5eb1eb90795cc88b0c17b91cefb5c4/.regioninfoReplication 2 set: /hbase/data/hbase/namespace/2c5eb1eb90795cc88b0c17b91cefb5c4/info/1f85f0f0d9b04d6f8c748f216fc969fcReplication 2 set: /hbase/data/hbase/namespace/2c5eb1eb90795cc88b0c17b91cefb5c4/recovered.edits/10.seqidReplication 2 set: /hbase/hbase.idReplication 2 set: /hbase/hbase.versionReplication 2 set: /hbase/oldWALs/gyb-p-common-01%2C60020%2C1547633332491.null0.1547633337412Replication 2 set: /hbase/oldWALs/hzd-p-skywalking-11%2C60020%2C1547633331411..meta.1547633343341.metaReplication 2 set: /hbase/oldWALs/hzd-p-skywalking-11%2C60020%2C1547633331411..meta.1547633344205.metaReplication 2 set: /hbase/oldWALs/hzd-p-skywalking-11%2C60020%2C1547633331411..meta.1547633344612.metaReplication 2 set: /hbase/oldWALs/hzd-p-skywalking-11%2C60020%2C1547633331411..meta.1547633881775.metaReplication 2 set: /hbase/oldWALs/hzd-p-skywalking-11%2C60020%2C1547633331411..meta.1547633881853.metaReplication 2 set: /hbase/oldWALs/hzd-p-skywalking-11%2C60020%2C1547633331411.null0.1547633655183Replication 2 set: /hbase/oldWALs/hzd-p-skywalking-11%2C60020%2C1547633331411.null0.1547633956325 /var1这个主要是修改log文件和firehose.storage.base.directory(cm的Host Monitor和Service Monitor监控数据的存放位置)的路径，不修改可能会将根目录撑满]]></content>
      <categories>
        <category>基础环境搭建</category>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>CDH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 安装java8]]></title>
    <url>%2F%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2Flinux%2Flinux-install-java8.html</url>
    <content type="text"><![CDATA[1、下载安装包1http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 2、 解压安装包到指定目录12tar -xf jdk-8u162-linux-x64.tar.gzmv jdk1.8.0_162 /usr/share/ 3、 配置环境变量123export JAVA_HOME=/usr/share/jdk1.8.0_162export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH 4、 执行profile1source /etc/profile 5、测试java是否安装正确1234 [root@node3 share]# java -versionjava version &quot;1.8.0_162&quot;Java(TM) SE Runtime Environment (build 1.8.0_162-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)]]></content>
      <categories>
        <category>基础环境搭建</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql二进制安装]]></title>
    <url>%2F%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2Fmysql%2Fbinary-mysql-install.html</url>
    <content type="text"><![CDATA[环境12centos7mysql 5.6 下载安装包12下载地址：ttps://dev.mysql.com/downloads/mysql/5.6.html#downloads选择linux-generic 解压安装包12tar -xf mysql-5.6.36-linux-glibc2.5-x86_64.tar.gzmv mysql-5.6.36-linux-glibc2.5-x86_64 /usr/local/mysql 修改配置文件（/etc/my.cnf）1234567[mysqld]basedir = /usr/local/mysqldatadir = /application/mysqldataport = 3306server_id = 1binlog-format=row sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 安装依赖包不安装则后续初始化mysql时可能会报缺少Data:Dumper或者libaio包的错123456安装 Data::Dumper有三种方法1，yum install perl-Data-Dumper.x86_64（见https://my.oschina.net/dabird/blog/5506312，yum -y install autoconf3，yum install &apos;perl(Data::Dumper)&apos;安装libaio包yum install libaio 创建mysql用户和mysql用户组12groupadd mysqluseradd mysql -s /sbin/nologin -M -g mysql 配置环境变量12345方法一：echo &apos;export PATH=/application/mysql/bin:$PATH&apos; &gt;&gt;/etc/profilesource /etc/profile方法二：ln -s /usr/local/mysql/bin/* /usr/local/bin/ 创建数据目录并赋权12mkdir -p /application/mysqldata chown -R mysql.mysql /application/mysqldata 初始化data目录12cd /usr/local/mysql/scripts./mysql_install_db --basedir=/usr/local/mysql --datadir=/application/mysqldata --user=mysql 配置 service mysqld start123cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld chmod +x /etc/init.d/mysqld 修改一下/etc/init.d/mysqld 的basedir和datadir分别为/usr/local/mysql和/application/mysqldata 启动 ，登录，修改密码12$service mysqld start$mysql]]></content>
      <categories>
        <category>基础环境搭建</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[纪念日]]></title>
    <url>%2Funcategorized%2Fmemday.html</url>
    <content type="text"><![CDATA[Title 小懒虫，我们已经 相识 days hours minute seconds function loveTime() { var date = new Date() - new Date(2010,09,11) var days = Math.floor(date / 1000 / 60 / 60 / 24) // 从这里开始 var daysmod = date - days * 24 *60 * 60 * 1000 var hours = Math.floor(daysmod / 1000 / 60 / 60) var hoursmod = date - (days * 24 *60 * 60 * 1000) - (hours * 1000 * 60 * 60) var minutes = Math.floor(hoursmod / 1000 / 60) var minutesmod = date - (days * 24 *60 * 60 * 1000) - (hours * 1000 * 60 * 60) - (minutes * 1000 * 60) var seconds = Math.floor(minutesmod / 1000) // 到这里结束，是将总毫秒转化成对应天数+小时数+分钟数+秒数的转换方法 var daysshow = document.getElementById("timdid1"); var ds = document.getElementById("timeid1"); var hs = document.getElementById("timeid2"); var ms = document.getElementById("timeid3"); var ss = document.getElementById("timeid4"); ds.innerHTML = days; hs.innerHTML = hours; ms.innerHTML = minutes; ss.innerHTML = seconds; } // 使用定时器实现每一秒写一次时间 setInterval("loveTime();",1000); 结婚 days hours minute seconds function loveTime1() { var date = new Date() - new Date(2016,04,02) var days = Math.floor(date / 1000 / 60 / 60 / 24) // 从这里开始 var daysmod = date - days * 24 *60 * 60 * 1000 var hours = Math.floor(daysmod / 1000 / 60 / 60) var hoursmod = date - (days * 24 *60 * 60 * 1000) - (hours * 1000 * 60 * 60) var minutes = Math.floor(hoursmod / 1000 / 60) var minutesmod = date - (days * 24 *60 * 60 * 1000) - (hours * 1000 * 60 * 60) - (minutes * 1000 * 60) var seconds = Math.floor(minutesmod / 1000) // 到这里结束，是将总毫秒转化成对应天数+小时数+分钟数+秒数的转换方法 var daysshow = document.getElementById("timdid1"); var ds = document.getElementById("timeid5"); var hs = document.getElementById("timeid6"); var ms = document.getElementById("timeid7"); var ss = document.getElementById("timeid8"); ds.innerHTML = days; hs.innerHTML = hours; ms.innerHTML = minutes; ss.innerHTML = seconds; } // 使用定时器实现每一秒写一次时间 setInterval("loveTime1();",1000);]]></content>
      <tags>
        <tag>memday</tag>
      </tags>
  </entry>
</search>
